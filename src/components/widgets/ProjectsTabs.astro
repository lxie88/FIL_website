import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import { Icon } from 'astro-icon/components';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  maxProjects?: number;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  maxProjects = 3,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Import projects data from the projects page
const projects = [
  {
    title: 'Left Ventricular Assist Device (LVAD) Research',
    excerpt: 'Research on optimizing LVAD design to minimize blood damage and improve patient outcomes.',
    image: '/images/projects/7.png',
    status: 'Ongoing',
    link: '/research/projects/lvad-research',
  },
  {
    title: 'Advanced Fluid Measurement Technique',
    excerpt: 'Studying the flow past transcatheter aortic valves using time-resolved 3D particle tracking',
    image: '/images/projects/4.png',
    status: 'Ongoing',
    link: '/research/projects/fluid-measurement',
  },
  {
    title: 'Turbomachinery Research',
    excerpt: 'Understanding extreme events in turbomachines through advanced imaging and flow control techniques.',
    image: '/images/projects/8.png',
    status: 'Ongoing',
    link: '/research/projects/turbomachinery-research',
  },
];

// Limit the number of projects to display
const displayProjects = projects.slice(0, maxProjects);

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="max-w-3xl mx-auto text-center mb-12">
    <Headline
      title={title}
      subtitle={subtitle}
      tagline={tagline}
      classes={{
        container: 'mb-0 md:mb-0',
        title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',
        subtitle: 'text-xl text-muted dark:text-slate-400',
      }}
    />
  </div>
  
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Tabs navigation -->
    <div class="md:w-1/3">
      <div class="flex flex-col space-y-2">
        {displayProjects.map((project, index) => (
          <button
            class={`p-4 text-left rounded-lg transition-colors ${
              index === 0
                ? 'bg-primary-600 text-white'
                : 'bg-gray-100 dark:bg-slate-800 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-slate-700'
            }`}
            data-tab={index}
            aria-selected={index === 0 ? 'true' : 'false'}
          >
            <h3 class="font-bold text-lg">{project.title}</h3>
            <span class={`inline-block px-2 py-1 text-xs font-semibold rounded-full mt-2 ${
              index === 0 ? 'bg-white/20' : 'bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200'
            }`}>
              {project.status}
            </span>
          </button>
        ))}
      </div>
    </div>
    
    <!-- Tab content -->
    <div class="md:w-2/3">
      {displayProjects.map((project, index) => (
        <div
          class={`tab-content ${index === 0 ? 'block' : 'hidden'}`}
          data-content={index}
        >
          <div class="bg-white dark:bg-slate-900 rounded-xl shadow-lg overflow-hidden">
            <div class="relative h-64">
              <img
                src={project.image}
                alt={project.title}
                class="w-full h-full object-cover"
              />
            </div>
            <div class="p-6">
              <h3 class="text-2xl font-bold mb-3">{project.title}</h3>
              <p class="text-gray-600 dark:text-slate-400 mb-4">{project.excerpt}</p>
              <a href={project.link} class="inline-flex items-center text-primary-600 dark:text-primary-400 font-medium hover:underline">
                Read more
                <Icon name="tabler:arrow-right" class="w-4 h-4 ml-1" />
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <div class="text-center mt-10">
    <a href="/research/projects" class="inline-flex items-center justify-center px-6 py-3 text-base font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
      View All Projects
      <Icon name="tabler:arrow-right" class="w-4 h-4 ml-1" />
    </a>
  </div>
</WidgetWrapper>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('[data-tab]');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabIndex = button.getAttribute('data-tab');
        
        // Update active tab button
        tabButtons.forEach(btn => {
          btn.classList.remove('bg-primary-600', 'text-white');
          btn.classList.add('bg-gray-100', 'dark:bg-slate-800', 'text-gray-800', 'dark:text-gray-200');
          btn.setAttribute('aria-selected', 'false');
          
          // Reset status badge
          const badge = btn.querySelector('span');
          if (badge) {
            badge.classList.remove('bg-white/20');
            badge.classList.add('bg-primary-100', 'text-primary-800', 'dark:bg-primary-900', 'dark:text-primary-200');
          }
        });
        
        button.classList.remove('bg-gray-100', 'dark:bg-slate-800', 'text-gray-800', 'dark:text-gray-200');
        button.classList.add('bg-primary-600', 'text-white');
        button.setAttribute('aria-selected', 'true');
        
        // Update status badge
        const badge = button.querySelector('span');
        if (badge) {
          badge.classList.remove('bg-primary-100', 'text-primary-800', 'dark:bg-primary-900', 'dark:text-primary-200');
          badge.classList.add('bg-white/20');
        }
        
        // Show selected tab content
        tabContents.forEach(content => {
          content.classList.add('hidden');
          if (content.getAttribute('data-content') === tabIndex) {
            content.classList.remove('hidden');
          }
        });
      });
    });
  });
</script> 